= Mods

{<img src="https://secure.travis-ci.org/sul-dlss/mods.png?branch=master" alt="Build Status" />}[http://travis-ci.org/sul-dlss/mods] {<img src="https://coveralls.io/repos/sul-dlss/mods/badge.png" alt="Coverage Status" />}[https://coveralls.io/r/sul-dlss/mods] {<img src="https://gemnasium.com/sul-dlss/mods.png" alt="Dependency Status" />}[https://gemnasium.com/sul-dlss/mods] {<img src="https://badge.fury.io/rb/mods.svg" alt="Gem Version" />}[http://badge.fury.io/rb/mods]

A Gem to parse MODS (Metadata Object Description Schema) records.  More information about MODS can be found at http://www.loc.gov/standards/mods/registry.php.

Source code at https://github.com/sul-dlss/mods/

Generated API docs at  http://rubydoc.info/github/sul-dlss/mods/

== Installation

Add this line to your application's Gemfile:

    gem 'mods'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install mods

== Usage

Create a new Mods::Record from a url:

  foo = Mods::Record.new.from_url('http://purl.stanford.edu/bb340tm8592.mods')

Create a new Mods::Record from a file:

  foo = Mods::Record.new.from_file('/path/to/mods/file.xml')

== Contributing

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Write code and tests.
4. Commit your changes (`git commit -am 'Added some feature'`)
5. Push to the branch (`git push origin my-new-feature`)
6. Create new Pull Request

== Releases

=======
* (see git commit history for more recent info)
* <b>2.0.1</b> Fixed nokogiri issue so no need to pin version number
* <b>2.0.0</b> Pinned version of nokogiri to < 1.6.6 because of addition of Node#lang in 1.6.6.1 which conflicts which currently used nodes
* <b>1.0.0</b> change jruby version in .travis to 1.7.9-d19; doesn't work with version 1.7.10
* <b>0.0.23</b> minor bug and typo fixes
* <b>0.0.22</b> add displayLabel and lang attributes to every element
* <b>0.0.21</b> bug fix to check for nil values in name nodes
* <b>0.0.21</b> Check for the possibility that name_node.display_value is nil
* <b>0.0.20</b> added translated_value convenience method to geographicCode  (mods.subject.geographicCode.translated_value)
* <b>0.0.19</b> term_values and term_value method added to Record object
* <b>0.0.18</b> <subject><temporal> cannot have subelements
* <b>0.0.17</b> add display_value and display_value_w_date to name node; add personal_names_w_dates to record
* <b>0.0.16</b> add role convenience methods (within name node)
* <b>0.0.15</b> make namespace aware processing the default
* <b>0.0.14</b> don't lose xml encoding in reader.normalize_mods under jruby
* <b>0.0.13</b> really really fix removal of xsi:schemaLocation in jruby
* <b>0.0.12</b> fix failing jruby test
* <b>0.0.11</b> fix remove xsi:schemaLocation attribute from mods element when not using namespaces
* <b>0.0.10</b> remove xsi:schemaLocation attribute from mods element when not using namespaces
* <b>0.0.9</b> implement from_nk_node as way to load record object
* <b>0.0.8</b> implement relatedItem and attributes on all simple top level elements
* <b>0.0.7</b> implement part
* <b>0.0.6</b> implement recordInfo, fix to work under jruby
* <b>0.0.5</b> implement subject, change a few constants
* <b>0.0.4</b> implement language, location, origin_info, physical_description
* <b>0.0.3</b> use nom-xml gem and make this more nokogiri-ish; implement name, title, and simple top level elements with no subelements
* <b>0.0.2</b> Set up rake tasks, publishing rdoc, and continuous integration.
* <b>0.0.1</b> Grab the name
